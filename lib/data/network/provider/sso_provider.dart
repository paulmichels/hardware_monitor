abstract class SSOProvider {
  static const defaultScopes = [
    'openid',
    'profile',
    'email',
  ];

  /// Convenience method for authorizing and then exchanges code
  Future<SSOAuthorizationTokenResponse?> authorizeAndExchangeCode({
    List<String> scopes = defaultScopes,
  });

  /// Sends an authorization request
  Future<SSOAuthorizationResponse?> authorize({
    List<String> scopes = defaultScopes,
  });

  /// For exchanging tokens
  Future<SSOTokenResponse?> token({
    required String refreshToken,
    List<String> scopes = defaultScopes,
  });

  /// End session
  Future<SSOEndSessionResponse?> endSession({
    required String idTokenHint,
  });
}

/// Contains the response from making an authorization request.
class SSOAuthorizationResponse {
  const SSOAuthorizationResponse({
    this.authorizationCode,
    this.codeVerifier,
    this.nonce,
    this.authorizationAdditionalParameters,
  });

  /// The authorization code.
  final String? authorizationCode;

  /// The code verifier generated by AppAuth when issuing the authorization
  /// request.
  ///
  /// Use this when exchanging the [authorizationCode] for a token.
  final String? codeVerifier;

  /// The nonce generated by AppAuth when issuing the authorization request.
  ///
  /// Use this when exchanging the [authorizationCode] for a token.
  final String? nonce;

  /// Additional parameters included in the response.
  final Map<String, dynamic>? authorizationAdditionalParameters;
}

/// Details from making a successful token exchange.
class SSOTokenResponse {
  SSOTokenResponse({
    this.accessToken,
    this.refreshToken,
    this.accessTokenExpirationDateTime,
    this.idToken,
    this.tokenType,
    this.scopes,
    this.tokenAdditionalParameters,
  });

  /// The access token returned by the authorization server.
  final String? accessToken;

  /// The refresh token returned by the authorization server.
  final String? refreshToken;

  /// Indicates when [accessToken] will expire.
  ///
  /// To ensure applications have continue to use valid access tokens, they
  /// will generally use the refresh token to get a new access token
  /// before it expires.
  final DateTime? accessTokenExpirationDateTime;

  /// The id token returned by the authorization server.
  final String? idToken;

  /// The type of token returned by the authorization server.
  final String? tokenType;

  /// Scopes of the access token. If scopes are identical to those originally
  /// requested, then this value is optional.
  final List<String>? scopes;

  /// Contains additional parameters returned by the authorization server from
  /// making the token request.
  final Map<String, dynamic>? tokenAdditionalParameters;
}

/// The details from making a successful combined authorization and token
/// exchange request.
class SSOAuthorizationTokenResponse extends SSOTokenResponse {
  SSOAuthorizationTokenResponse({
    super.accessToken,
    super.refreshToken,
    super.accessTokenExpirationDateTime,
    super.idToken,
    super.tokenType,
    super.scopes,
    this.authorizationAdditionalParameters,
    super.tokenAdditionalParameters,
  });

  /// Contains additional parameters returned by the authorization server from
  /// making the authorization request.
  final Map<String, dynamic>? authorizationAdditionalParameters;
}

class SSOEndSessionResponse {
  final String? state;

  SSOEndSessionResponse({
    required this.state,
  });
}
